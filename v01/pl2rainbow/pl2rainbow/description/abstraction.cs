using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel;

namespace pl2.rainbow.description
{
    public enum Abstraction_level
    {
        Class_infinity = -10 , // пустой тип - void, empty, nil, null

        Class_domain = -9 , // элементарный класс среды исполнения (ValueType)

        Class_tuple = -8 , // связь между указанными объектами (аналогично предложениям Prolog, списку параметров функций), методы и свойства отсутствуют, доступ происходит только к открытым членам. По возможностям аналогично набору, возвращаемому из реляционной базы данных

        Class_structure = -7 , // структура с открытыми элементами. Для доступа к элементу текущего объекта используется слово this. Может содержать методы для обработки.

        Class_system = -6 , // система, которая может содержать закрытые и защищенные наследуемые элементы.

        Class_process = -5 , // процесс, которому можно передать инициализирующие значения и получить результирующие значения. Соответствует службе. Любой метод получает не только указатель на себя (this), но и указатель на вызвавший класс или объект (sender). Это позволяет проверить авторизацию объекта, осуществляющего доступ к методу. Для предотвращения низкоуровневой подмены sender, параметры обрабатываемого события запрашиваются у вызывающего объекта после получения идентификатора сообщения. Содержит стандартные методы.

        Class_specialist = -4 , // специализированный класс, который выполняет указанный соглашениями набор функций. Соответствует COM-модели. Поддерживает свойство possibility с интерфейсом control interface

        Class_parallel = -3 , // асинхронно работающий класс, передающий сообщения о выполнении задачи. Поддерживает свойство manager с интерфейсом exchange interface

        Class_stability = -2 , // устойчивый класс

        Class_responsibility = -1 , // нижний приреал

        Class_reality = 0 , //экватор реальности

        Interface_technology = 1 , // технологическое

        Interface_alignment = 2 , // выравнивающее 

        Interface_exchange = 3 , // взаимодействие с окружающей средой

        Interface_control = 4 , // описание управления

        Interface_politic = 5 , // описание стратегии

        Interface_session = 6 , // интерфейсы для хранения текущего состояния

        Interface_functional = 7 , // функциональные связи, конечные автоматы

        Interface_target = 8 , //   логические элементы

        Interface_logical = 9 , //   логические элементы

        Interface_infinity = 10 // универсальный интерфейс

    }
}
